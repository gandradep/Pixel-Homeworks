//IN PROCESSING: For this project Im uploading 20 images, so be sure to have some in you data folder of the program
PImage[] images = new PImage[20];
int R, G, B, A;
int currentImage;
float timer;
float increase = 0.01;  // speed that images are change
int stop=1; // variable to check if mouse clicked
int extraR, extraG, extraB;

void setup () {
  size(900, 750);
  for (int i = 0; i <images.length; i++) {
    images[i] = loadImage(i+".jpg");
  }
  for (int i = 0; i<images.length; i++) {
    images[i].resize(width, height);
    images[i].loadPixels();
  }
  second();
}

void draw() {
  if (stop == 1) {
    timer+=increase;
    currentImage = int(timer)%images.length; 
    extraR = int(map(currentImage, 0, images.length, 0, 255));
    extraB = extraR;
    extraG = int(map(sin(timer),-1,1,0,100));
  } else {
    timer+=0;
    extraR=mouseX;
    extraB=mouseY;
    extraG=(extraR+extraB)/10;
  }


  loadPixels();

  for (int x = 0; x<width; x++) {
    for (int y = 0; y<height; y++) {
      PxPGetPixel(x, y, images[currentImage].pixels, width); // get the R,G,B values
      R=R+extraR;
      G= G+extraG;
      B=B+extraB;
      PxPSetPixel(x, y, R, G, B, 255, pixels, width);
    }
  }
  updatePixels();

}
void mouseClicked() {
  stop = -stop;
  // println(stop);
}
void PxPGetPixel(int x, int y, int[] pixelArray, int pixelsWidth) {
  int thisPixel=pixelArray[x+y*pixelsWidth];     // getting the colors as an int from the pixels[]
  A = (thisPixel >> 24) & 0xFF;                  // we need to shift and mask to get each component alone
  R = (thisPixel >> 16) & 0xFF;                  // this is faster than calling red(), green() , blue()
  G = (thisPixel >> 8) & 0xFF;   
  B = thisPixel & 0xFF;
}


//our function for setting color components RGB into the pixels[] , we need to efine the XY of where
// to set the pixel, the RGB values we want and the pixels[] array we want to use and it's width

void PxPSetPixel(int x, int y, int r, int g, int b, int a, int[] pixelArray, int pixelsWidth) {
  a =(a << 24);                       
  r = r << 16;                       // We are packing all 4 composents into one int
  g = g << 8;                        // so we need to shift them to their places
  color argb = a | r | g | b;        // binary "or" operation adds them all into one int
  pixelArray[x+y*pixelsWidth]= argb;    // finaly we set the int with te colors into the pixels[]
}
